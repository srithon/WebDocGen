#+title: WebDocGen
#+OPTIONS: toc:nil

WebDocGen is a tool intended for generating web documentation/user manuals for websites.
Developers can describe their documentation in Markdown, interspersing it with Javascript codeblocks that will be executed in a browser, and whose "results" will be interpolated into an output Markdown file.
This idea is inspired by the [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]] paradigm, and specifically Emacs's [[https://orgmode.org/][Org Mode]].

The beauty of Markdown as an input/output format is that it can be converted to practically any other format.
Coupled with a [[https://github.com/ryangrose/easy-pandoc-templates][Pandoc template]], you can trivially convert it to HTML or into a PDF with hardly any setup.
Also, static site generators like [[https://gohugo.io/][Hugo]] and [[https://jekyllrb.com][Jekyll]] have tons of open source themes that you can use, and allow you to take Markdown files and turn them into full-fledged documentation websites.

* Example
This example looks at Google.com, and goes through the main features of WebDocGen.

#+begin_src markdown :tangle example_input.md
---
url: https://google.com
---

# Intro

This is Google.
Google has a search bar in the middle of the screen.

```javascript
const searchBarSelector = ".RNNXgb";
window.searchBarSelector = searchBarSelector;

await hover(searchBarSelector);
await withHighlight(
  searchBarSelector,
  async () => {
    await screenshot("Search bar");
  },
  // make the background dark instead of light
  true
);

await click(searchBarSelector);
```

# Clicking on suggestions

When you click on the search bar, Google gives you a list of suggestions that you can click on.

```javascript
const selector = "li.sbct:nth-child(1)";
await hover(selector);

const optionsSelector = ".UUbT9";
await withHighlight(
  // we can highlight multiple selectors at once
  [optionsSelector, window.searchBarSelector],
  // this returns the promise, which is effectively the same as the previous
  // async/await example with withHighlight.
  () => screenshot("Hovering over first item"),
  true
);

// when clicking into a new page, it should typically be at the end of the code
// block since it will not get executed until after the code block ends.
// notice that I omitted the await since it doesn't make a difference here.
click(selector, { newPage: true });
```

## Let's click on the first one!

<!--
this is the syntax for adding HTML in the document. for technical details on
why you can't just use angle brackets, see the source code, towards the end of
the file. if you want to have literal double curly braces in the output, then
use three instead of two. if you want three then use four, etc. if there is
only one curly brace, it is untouched.
-->
{{div class="html-example"}}

```javascript
await screenshot("Result of clicking on first item");
```

{{/div}}
#+end_src
